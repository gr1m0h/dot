#!/bin/sh

DOTFILES="$(pwd)"
COLOR_GRAY="\033[1;38;5;243m"
COLOR_PURPLE="\033[1;35m"
COLOR_RED="\033[1;31m"
COLOR_BLUE="\033[1;34m"
COLOR_GREEN="\033[1;32m"
COLOR_YELLOW="\033[1;33m"
COLOR_NONE="\033[0m"

title() {
  echo -e "\n${COLOR_PURPLE}$1${COLOR_NONE}"
  echo -e "${COLOR_GRAY}==============================${COLOR_NONE}\n"
}

err() {
  echo -e "${COLOR_RED}ERROR: ${COLOR_NONE}$1"
}

warn() {
  echo -e "${COLOR_YELLOW}WARNING: ${COLOR_NONE}$1"
}

info() {
  echo -e "${COLOR_BLUE}INFO: ${COLOR_NONE}$1"
}

success() {
  echo -e "${COLOR_GREEN}$1${COLOR_NONE}"
}

setup_dotfiles() {
  title "Downloading dotfiles"

  echo -e
  info "downloading dotfiles"
  DOTFILES=(
    .aqua.yaml
    .editorconfig
    .gitconfig
    .tool-versions
    .zprofile
    .zshrc
  )

  for dotfile in "${DOTFILES[@]}"; do
    if [ -e "$HOME/$dotfile" ]; then
      info "~${dotfile#$HOME} already exists... Skipping."
    else
      info "Downloading $HOME/$dotfile"
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/grimoh/dorfiles/HEAD/$dotfile)"
    fi
  done

  echo -e
  info "installing .config"
  if [ -d "$HOME/.config" ]; then
    info "$HOME/.config already exists... Skipping."
  else
    info "Downloading $HOME/.config"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/grimoh/dorfiles/HEAD/.config)"
  fi
}

setup_homebrew() {
  title "Setting up Homebrew"

  # install if Homebrew is not installed
  if test ! "$( command -v brew )"; then
    info "Homebrew not installed. Installing."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  # for Linux
  if [ "$(uname)" == "Linux" ]; then
    test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
    test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
  fi

  # install brew dependencies from Brewfile
  brew bundle
}

setup_fish(){
  title "Setting up fish-shell"

  # install if fisher is not installed
  if ! ( type "fisher" > /dev/null 2>&1 ); then
    info "Fisher not installed. Installing."
    curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher
  fi

  # install fisher plugins
  FISHER_PACKAGES=(
    decors/fish-ghq
    dracula/fish
    evanlucas/fish-kubectl-completions
    franciscolourenco/done
    jethrokuan/fzf
    jethrokuan/z
    grimoh/fish-aqua
    grimoh/fish-prompt
  )
  fish -C 'fisher install "${FISHER_PACKAGES[@]}" || :'
}

setup_macos(){
  title "Configuring macOS"
  if [[ "$(uname)" == "Darwin" ]]; then

    # make working space dir
    mkdir -p $HOME/Documents/workspace

    # install command line tools for xcode
    if [ ! -d /Library/Developer/CommandLineTools ]; then
      info "xcode not installed. Installing."
      xcode-select --install
    fi

    echo "Finder: show all filename extensions"
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true

    echo "show hidden files by default"
    defaults write com.apple.Finder AppleShowAllFiles -bool false

    echo "only use UTF-8 in Terminal.app"
    defaults write com.apple.terminal StringEncodings -array 4

    echo "expand save dialog by default"
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

    echo "show the ~/Library folder in Finder"
    chflags nohidden ~/Library

    echo "Enable full keyboard access for all controls (e.g. enable Tab in modal dialogs)"
    defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

    echo "Enable subpixel font rendering on non-Apple LCDs"
    defaults write NSGlobalDomain AppleFontSmoothing -int 2

    echo "Use current directory as default search scope in Finder"
    defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

    echo "Show Path bar in Finder"
    defaults write com.apple.finder ShowPathbar -bool true

    echo "Show Status bar in Finder"
    defaults write com.apple.finder ShowStatusBar -bool true

    echo "Disable press-and-hold for keys in favor of key repeat"
    defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

    echo "Set a blazingly fast keyboard repeat rate"
    defaults write NSGlobalDomain KeyRepeat -int 1

    echo "Set a shorter Delay until key repeat"
    defaults write NSGlobalDomain InitialKeyRepeat -int 15

    echo "Enable tap to click (Trackpad)"
    defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true

    echo "Enable Safariâ€™s debug menu"
    defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

    echo "Kill affected applications"
    for app in Safari Finder Dock Mail SystemUIServer; do killall "$app" >/dev/null 2>&1; done
  else
    warn "macOS not detected. Skipping."
  fi
}

setup_asdfvm(){
  title "Setting up asdf-vm"

  # add asdf plugins
  asdf plugin add 1password-cli
  asdf plugin add nodejs
  asdf plugin add python
  asdf plugin add rubbish https://github.com/grimoh/asdf-rubbish.git
  asdf plugin add ruby

  # install asdf plugins
  asdf install
}

setup_aqua(){
  title "Setting up aqua"

  # install aqua plugins
  aqua install
}

setup_docker(){
  title "Setting up docker"

  # change to use docker.sock mounted by colima
  docker context use colima
  # echo $1 | sudo ln -s $HOME/.colima/docker.sock /var/run/docker.sock
}

setup_neovim(){
  title "Setting up neovim"

  # install packer(neovim package management plugin) if not installed
  if ! ( ! -d ~/.local/share/nvim/site/pack/packer/opt/packer.nvim ); then
    info "Packer not installed. Installing."
    git clone https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/opt/packer.nvim
  fi
}

setup_packages(){
  title "Install packages"

  # make package
  mkdir -p $HOME/.packages/go $HOME/.packages/npm

  # install gem packages
  gem install neovim

  # install python packages
  python3 -m pip install pynvim

  # install npm packages
  NPM_PACKAGES=(
    neovim
    eclint
    typescript
  )
  npm install --global "${NPM_PACKAGES[@]}" || :

  # install go packages
  GO_PACKAGES=(
    golang.org/x/tools/cmd/godoc@latest
    google.golang.org/protobuf/cmd/protoc-gen-go@latest
    google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
  )
  go install "${GO_PACKAGE[@]}" || :
}

case "$1" in
  dotfiles)
    setup_dotfiles
    ;;
  homebrew)
    setup_homebrew
    ;;
  fish)
    setup_fish
    ;;
  macos)
    setup_macos
    ;;
  asdfvm)
    setup_asdfvm
    ;;
  aqua)
    setup_aqua
    ;;
  docker)
    setup_docker
    ;;
  neovim)
    setup_neovim
    ;;
  pkgs)
    setup_packages
    ;;
  all)
    setup_dotfiles
    setup_homebrew
    setup_fish
    setup_macos
    setup_asdfvm
    setup_aqua
    setup_docker
    setup_neovim
    setup_packages
    ;;
  *)
    echo $"\nUsage: $(basename "$0") {dotfiles|homebrew|fish|macos|asdfvm|aqua|docker|neovim|pkgs|all}\n"
    exit 1
    ;;
esac

success "Done."
