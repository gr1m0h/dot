#!/bin/sh

DOTFILES="$(pwd)"
COLOR_GRAY="\033[1;38;5;243m"
COLOR_BLUE="\033[1;34m"
COLOR_GREEN="\033[1;32m"
COLOR_RED="\033[1;31m"
COLOR_PURPLE="\033[1;35m"
COLOR_YELLOW="\033[1;33m"
COLOR_NONE="\033[0m"

title() {
  echo -e "\n${COLOR_PURPLE}$1${COLOR_NONE}"
  echo -e "${COLOR_GRAY}==============================${COLOR_NONE}\n"
}

info() {
  echo -e "${COLOR_BLUE}Info: ${COLOR_NONE}$1"
}

success() {
  echo -e "${COLOR_GREEN}$1${COLOR_NONE}"
}

get_linkables() {
    find -H "$DOTFILES" -maxdepth 3 -name '*.symlink'
}

backup() {
  BACKUP_DIR=$HOME/dotfiles-backup

  echo "Creating backup directory at $BACKUP_DIR"
  mkdir -p "$BACKUP_DIR"

  for file in $(get_linkables); do
    filename=".$(basename "$file" '.symlink')"
    target="$HOME/$filename"
    if [ -f "$target" ]; then
      echo "backing up $filename"
      cp "$target" "$BACKUP_DIR"
    else
      warning "$filename does not exist at this location or is a symlink"
    fi
  done

  for filename in "$HOME/.config/nvim" "$HOME/.vim" "$HOME/.vimrc"; do
    if [ ! -L "$filename" ]; then
      echo "backing up $filename"
      cp -rf "$filename" "$BACKUP_DIR"
    else
      warning "$filename does not exist at this location or is a symlink"
    fi
  done
}

setup_homebrew() {
  title "Setting up Homebrew"

  # install if Homebrew is not installed
  if test ! "$( command -v brew )"; then
    info "Homebrew not installed. Installing."
    curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh | bash --login
  fi

  # for Linux
  if [ "$(uname)" == "Linux" ]; then
    test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
    test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
  fi

  # install brew dependencies from Brewfile
  brew bundle
}

setup_fish(){
  title "Setting up fish-shell"

  # install if fisher is not installed
  if ! ( type "fisher" > /dev/null 2>&1 ); then
    info "Fisher not installed. Installing."
    curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher
  fi

  # install fisher plugins
  FISHER_PACKAGE=(
    decors/fish-ghq
    dracula/fish
    evanlucas/fish-kubectl-completions
    franciscolourenco/done
    jethrokuan/fzf
    jethrokuan/z
    grimoh/fish-aqua
    grimoh/fish-prompt
  )
  fish -C 'fisher install "${FISHER_PACKAGE[@]}" || :'
}

setup_symlinks() {
  title "Creating symlinks"

  for file in $(get_linkables) ; do
    target="$HOME/.$(basename "$file" '.symlink')"
    if [ -e "$target" ]; then
      info "~${target#$HOME} already exists... Skipping."
    else
      info "Creating symlink for $file"
      ln -s "$file" "$target"
    fi
  done

  echo -e
  info "installing to ~/.config"
  if [ ! -d "$HOME/.config" ]; then
    info "Creating ~/.config"
    mkdir -p "$HOME/.config"
  fi

  config_files=$(find "$DOTFILES/config" -maxdepth 1 2>/dev/null)
  for config in $config_files; do
    target="$HOME/.config/$(basename "$config")"
    if [ -e "$target" ]; then
      info "~${target#$HOME} already exists... Skipping."
    else
      info "Creating symlink for $config"
      ln -s "$config" "$target"
    fi
  done
}

setup_macos(){
  title "Configuring macOS"
  if [[ "$(uname)" == "Darwin" ]]; then

  # install command line tools for xcode
  if [ ! -d /Library/Developer/CommandLineTools ]; then
    info "xcode not installed. Installing."
	  xcode-select --install
  fi

  echo "Finder: show all filename extensions"
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true

  echo "show hidden files by default"
  defaults write com.apple.Finder AppleShowAllFiles -bool false

  echo "only use UTF-8 in Terminal.app"
  defaults write com.apple.terminal StringEncodings -array 4

  echo "expand save dialog by default"
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

  echo "show the ~/Library folder in Finder"
  chflags nohidden ~/Library

  echo "Enable full keyboard access for all controls (e.g. enable Tab in modal dialogs)"
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

  echo "Enable subpixel font rendering on non-Apple LCDs"
  defaults write NSGlobalDomain AppleFontSmoothing -int 2

  echo "Use current directory as default search scope in Finder"
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

  echo "Show Path bar in Finder"
  defaults write com.apple.finder ShowPathbar -bool true

  echo "Show Status bar in Finder"
  defaults write com.apple.finder ShowStatusBar -bool true

  echo "Disable press-and-hold for keys in favor of key repeat"
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

  echo "Set a blazingly fast keyboard repeat rate"
  defaults write NSGlobalDomain KeyRepeat -int 1

  echo "Set a shorter Delay until key repeat"
  defaults write NSGlobalDomain InitialKeyRepeat -int 15

  echo "Enable tap to click (Trackpad)"
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true

  echo "Enable Safariâ€™s debug menu"
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

  echo "Kill affected applications"
  for app in Safari Finder Dock Mail SystemUIServer; do killall "$app" >/dev/null 2>&1; done
  else
    warning "macOS not detected. Skipping."
  fi
}

cat <<EOS
#####################################
# pre setup
#####################################
EOS

echo "# make workspace and package dir"
mkdir -p $HOME/Documents/workspace
mkdir -p $HOME/.packages/go
mkdir -p $HOME/.packages/npm

echo "# cd root"
cd $HOME

cat <<EOS
#####################################
# asdf
#####################################
EOS

echo "# add asdf plugins"
asdf plugin add 1password-cli
asdf plugin add nodejs
asdf plugin add python
asdf plugin add rubbish https://github.com/grimoh/asdf-rubbish.git
asdf plugin add ruby

echo "# install asdf plugins"
asdf install

cat <<EOS
#####################################
# neovim
#####################################
EOS

echo "# install packer(neovim package management plugin) if not installed"
if ! ( ! -d ~/.local/share/nvim/site/pack/packer/opt/packer.nvim ); then
  git clone https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/opt/packer.nvim
fi

echo "# run neovim"
nvim

cat <<EOS
#####################################
# packages
#####################################
EOS

echo "# install gem packages"
gem install neovim

echo "# install python packages"
python3 -m pip install pynvim

echo "# install npm packages"
npm install --global neovim
npm install --global dockerfile-language-server-nodejs
npm install --global eclint
npm install --global quick-lint-js
npm install --global typescript-language-server
npm install --global typescript
npm install --global yaml-language-server

echo "# install go packages"
go install golang.org/x/tools/gopls@latest

cd
rm -rf .setup
echo "# setup completed"

echo -e
success "Done."
