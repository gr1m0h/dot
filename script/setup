#!/bin/sh

set -e

REPO_URL="https://raw.githubusercontent.com/gr1m0h/dot/HEAD"
DOTPATH="$(pwd)"
COLOR_GRAY="\033[1;38;5;243m"
COLOR_PURPLE="\033[1;35m"
COLOR_RED="\033[1;31m"
COLOR_BLUE="\033[1;34m"
COLOR_GREEN="\033[1;32m"
COLOR_YELLOW="\033[1;33m"
COLOR_NONE="\033[0m"

title() {
  printf "\n%s\n" "${COLOR_PURPLE}$1${COLOR_NONE}"
  printf "%s\n\n" "${COLOR_GRAY}==============================${COLOR_NONE}"
}

err() {
  printf "%s\n" "${COLOR_RED}ERROR: ${COLOR_NONE}$1"
  exit 1
}

warn() {
  printf "%s\n" "${COLOR_YELLOW}WARNING: ${COLOR_NONE}$1"
}

info() {
  printf "%s\n" "${COLOR_BLUE}INFO: ${COLOR_NONE}$1"
}

success() {
  printf "%s\n" "${COLOR_GREEN}$1${COLOR_NONE}"
}

download_file() {
  local src="$1"
  local dest="$2"
  
  curl -fsSL "$REPO_URL/$src" -o "$dest"
}

setup_dotfiles() {
  title "Downloading dotfiles"

  local dotfiles="
.editorconfig
.zshenv
"

  for dotfile in $dotfiles; do
    if [ -e "$HOME/$dotfile" ]; then
      info "$dotfile already exists... Skipping."
    else
      info "Downloading $dotfile to $HOME/$dotfile"
      download_file "dots/$dotfile" "$HOME/$dotfile"
    fi
  done

  if [ -d "$HOME/.config" ]; then
    info "$HOME/.config already exists... Skipping."
  else
    info "Creating $HOME/.config directory"
    mkdir -p "$HOME/.config"
    info "Downloading .config files"
    download_file ".config" "$HOME/.config"
  fi
}

setup_homebrew() {
  title "Setting up Homebrew"

  # install if Homebrew is not installed
  if ! command -v brew >/dev/null 2>&1; then
    info "Homebrew not installed. Installing."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Make sure brew is in PATH
    case "$(uname -m)" in
      arm64)
        eval "$(/opt/homebrew/bin/brew shellenv)"
        ;;
      x86_64)
        eval "$(/usr/local/bin/brew shellenv)"
        ;;
    esac
  fi

  info "Downloading Brewfile"
  download_file "Brewfile" "$DOTPATH/Brewfile"

  info "Installing brew dependencies from Brewfile"
  brew bundle --file="$DOTPATH/Brewfile" || warn "Failed to install some Homebrew packages"
}

setup_macos() {
  title "Configuring macOS"
  if [ "$(uname)" != "Darwin" ]; then
    warn "macOS not detected. Skipping."
    return
  fi

  info "Creating workspace directory"
  mkdir -p "$HOME/Documents/workspace"

  # Install command line tools for xcode if not installed
  if [ ! -d /Library/Developer/CommandLineTools ]; then
    info "Installing Xcode Command Line Tools"
    xcode-select --install || warn "Failed to install Xcode Command Line Tools"
  else
    info "Xcode Command Line Tools already installed"
  fi

  # Install Rosetta 2 on Apple Silicon
  if [ "$(uname -m)" = "arm64" ]; then
    if ! pgrep -q oahd; then
      info "Installing Rosetta for Apple Silicon"
      softwareupdate --install-rosetta --agree-to-license || warn "Failed to install Rosetta"
    else
      info "Rosetta already installed"
    fi
  fi

  info "Configuring Terminal"
  defaults write com.apple.terminal StringEncodings -array 4

  info "Configuring Safari"
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

  info "Configuring Finder"
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
  defaults write com.apple.Finder AppleShowAllFiles -bool false
  chflags nohidden ~/Library
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
  defaults write com.apple.finder ShowPathbar -bool true
  defaults write com.apple.finder ShowStatusBar -bool true
  defaults write com.apple.finder NewWindowTarget -string "PfDe"

  info "Configuring Dock"
  defaults write com.apple.dock persistent-apps -array
  defaults write com.apple.dock orientation bottom
  defaults write com.apple.dock "mineffect" -string "suck"
  defaults write com.apple.dock largesize -float 95
  defaults write com.apple.dock autohide -bool true
  defaults write com.apple.dock show-recents -bool false
  defaults write com.apple.dock show-process-indicators -bool false

  info "Configuring Menu Bar"
  for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
    defaults write "${domain}" dontAutoLoad -array \
      "/System/Library/CoreServices/Menu Extras/TimeMachine.menu" \
      "/System/Library/CoreServices/Menu Extras/Volume.menu"
  done

  info "Configuring Keyboard"
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3
  defaults write NSGlobalDomain AppleFontSmoothing -int 2
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
  defaults write NSGlobalDomain KeyRepeat -int 1
  defaults write NSGlobalDomain InitialKeyRepeat -int 15

  info "Configuring Trackpad"
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true

  info "Configuring Security and Privacy"
  defaults write com.apple.screensaver askForPassword -bool true
  defaults write com.apple.screensaver askForPasswordDelay -int 0
  sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1 || warn "Failed to enable firewall (requires sudo)"

  info "Configuring Clock"
  defaults write com.apple.menuextra.clock 'DateFormat' -string 'EEE d MMM HH:mm'

  info "Restarting affected applications"
  for app in Safari Finder Dock SystemUIServer; do 
    killall "$app" >/dev/null 2>&1 || true
  done
  
  success "macOS configured successfully"
}

setup_docker() {
  title "Setting up docker"

  if ! command -v docker >/dev/null 2>&1; then
    err "Docker not installed. Please install Docker first."
  fi

  if ! command -v colima >/dev/null 2>&1; then
    err "Colima not installed. Please install Colima first."
  fi

  info "Starting Colima if not running"
  if ! colima status >/dev/null 2>&1; then
    info "Starting Colima"
    colima start || err "Failed to start Colima"
  else
    info "Colima is already running"
  fi

  info "Setting up docker context to use colima"
  docker context use colima || true

  info "Linking docker socket for compatibility"
  sudo ln -sf "$HOME/.colima/docker.sock" /var/run/docker.sock || warn "Failed to create docker socket link (requires sudo)"
}

case "$1" in
dotfiles)
  setup_dotfiles
  ;;
homebrew)
  setup_homebrew
  ;;
macos)
  setup_macos
  ;;
docker)
  setup_docker
  ;;
all)
  setup_dotfiles
  setup_homebrew
  setup_macos
  setup_docker
  ;;
*)
  printf "\nUsage: %s {dotfiles|homebrew|macos|docker|all}\n" "$(basename "$0")"
  exit 1
  ;;
esac

success "Done."