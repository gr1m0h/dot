#!/bin/sh

# Exit on error, undefined variables, and propagate errors in pipes
set -euo pipefail

# Configuration
REPO_URL="https://raw.githubusercontent.com/gr1m0h/dot/HEAD"
DOTPATH="$(pwd)"
# Make sure DOTPATH is set
if [ -z "${DOTPATH}" ]; then
  DOTPATH="$(cd "$(dirname "$0")/.." && pwd)"
fi
COLOR_GRAY="\033[1;38;5;243m"
COLOR_PURPLE="\033[1;35m"
COLOR_RED="\033[1;31m"
COLOR_BLUE="\033[1;34m"
COLOR_GREEN="\033[1;32m"
COLOR_YELLOW="\033[1;33m"
COLOR_NONE="\033[0m"

title() {
  printf "\n%s\n" "${COLOR_PURPLE}$1${COLOR_NONE}"
  printf "%s\n\n" "${COLOR_GRAY}==============================${COLOR_NONE}"
}

err() {
  printf "%s\n" "${COLOR_RED}ERROR: ${COLOR_NONE}$1"
  exit 1
}

warn() {
  printf "%s\n" "${COLOR_YELLOW}WARNING: ${COLOR_NONE}$1"
}

info() {
  printf "%s\n" "${COLOR_BLUE}INFO: ${COLOR_NONE}$1"
}

success() {
  printf "%s\n" "${COLOR_GREEN}$1${COLOR_NONE}"
}

download_file() {
  local src="$1"
  local dest="$2"

  if ! curl -fsSL "$REPO_URL/$src" -o "$dest"; then
    err "Failed to download $src to $dest"
  fi
}

setup_dotfiles() {
  title "Downloading dotfiles"

  local dotfiles="
.editorconfig
.zshenv
.actrc
.mmcp.json
.markdownlint-cli2.jsonc
"

  for dotfile in $dotfiles; do
    if [ -e "$HOME/$dotfile" ]; then
      info "$dotfile already exists... Skipping."
    else
      info "Downloading $dotfile to $HOME/$dotfile"
      download_file "dots/$dotfile" "$HOME/$dotfile"
    fi
  done

  # Setup .config directory structure
  info "Setting up .config directory"
  mkdir -p "$HOME/.config/zsh"
  mkdir -p "$HOME/.config/starship"

  # Zsh configuration files
  local zsh_configs="
.zshrc
.zsh_aliases
.zsh_completions
.zsh_corp
"

  for config in $zsh_configs; do
    if [ -e "$HOME/.config/zsh/$config" ]; then
      info "zsh/$config already exists... Skipping."
    else
      info "Downloading zsh/$config to $HOME/.config/zsh/$config"
      download_file "dots/.config/zsh/$config" "$HOME/.config/zsh/$config"
    fi
  done

  # Starship configuration
  if [ -e "$HOME/.config/starship/starship.toml" ]; then
    info "starship/starship.toml already exists... Skipping."
  else
    info "Downloading starship/starship.toml to $HOME/.config/starship/starship.toml"
    download_file "dots/.config/starship/starship.toml" "$HOME/.config/starship/starship.toml"
  fi

  # Additional config directories
  local config_dirs="
hammerspoon
sheldon
wezterm
git
"

  for dir in $config_dirs; do
    mkdir -p "$HOME/.config/$dir"
    info "Setting up $dir configuration"

    case "$dir" in
    hammerspoon)
      if [ -e "$HOME/.config/hammerspoon/init.lua" ]; then
        info "hammerspoon/init.lua already exists... Skipping."
      else
        download_file "dots/.config/hammerspoon/init.lua" "$HOME/.config/hammerspoon/init.lua"
      fi
      ;;
    sheldon)
      if [ -e "$HOME/.config/sheldon/plugins.toml" ]; then
        info "sheldon/plugins.toml already exists... Skipping."
      else
        download_file "dots/.config/sheldon/plugins.toml" "$HOME/.config/sheldon/plugins.toml"
      fi
      ;;
    wezterm)
      if [ -e "$HOME/.config/wezterm/wezterm.lua" ]; then
        info "wezterm/wezterm.lua already exists... Skipping."
      else
        download_file "dots/.config/wezterm/wezterm.lua" "$HOME/.config/wezterm/wezterm.lua"
      fi
      ;;
    git)
      if [ -e "$HOME/.config/git/config" ]; then
        info "git/config already exists... Skipping."
      else
        download_file "dots/.config/git/config" "$HOME/.config/git/config"
      fi
      if [ -e "$HOME/.config/git/ignore" ]; then
        info "git/ignore already exists... Skipping."
      else
        download_file "dots/.config/git/ignore" "$HOME/.config/git/ignore"
      fi
      ;;
    esac
  done
}

setup_homebrew() {
  title "Setting up Homebrew"

  # install if Homebrew is not installed
  if ! command -v brew >/dev/null 2>&1; then
    info "Homebrew not installed. Installing."
    if ! /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then
      err "Failed to install Homebrew"
    fi

    # Make sure brew is in PATH
    case "$(uname -m)" in
    arm64)
      if [ -f "/opt/homebrew/bin/brew" ]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
      else
        err "Homebrew installation failed - brew executable not found"
      fi
      ;;
    x86_64)
      if [ -f "/usr/local/bin/brew" ]; then
        eval "$(/usr/local/bin/brew shellenv)"
      else
        err "Homebrew installation failed - brew executable not found"
      fi
      ;;
    *)
      err "Unsupported architecture: $(uname -m)"
      ;;
    esac

    # Verify brew is now in path
    if ! command -v brew >/dev/null 2>&1; then
      err "Homebrew installation succeeded but brew is not in PATH"
    fi
  fi

  info "Downloading Brewfile"
  download_file "Brewfile" "$DOTPATH/Brewfile"

  info "Installing brew dependencies from Brewfile"
  if ! brew bundle --file="$DOTPATH/Brewfile"; then
    warn "Failed to install some Homebrew packages. Check logs for details."
    info "You can try running 'brew bundle --file=\"$DOTPATH/Brewfile\"' manually later."
  fi
}

setup_macos() {
  title "Configuring macOS"
  if [ "$(uname)" != "Darwin" ]; then
    warn "macOS not detected. Skipping."
    return
  fi

  info "Creating workspace directory"
  if ! mkdir -p "$HOME/Documents/workspace"; then
    warn "Failed to create workspace directory"
  else
    success "Created workspace directory at $HOME/Documents/workspace"
  fi

  # Install command line tools for xcode if not installed
  if [ ! -d /Library/Developer/CommandLineTools ]; then
    info "Installing Xcode Command Line Tools"
    # xcode-select --install is interactive and can't be scripted effectively
    # Using a more reliable approach
    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
    PROD=$(softwareupdate -l | grep "\*.*Command Line" | tail -n 1 | sed 's/^[^C]* //')
    if [ -n "$PROD" ]; then
      info "Found Command Line Tools update: $PROD"
      if ! softwareupdate -i "$PROD" --verbose; then
        warn "Failed to install Xcode Command Line Tools"
        info "You may need to install manually with 'xcode-select --install'"
      else
        success "Installed Xcode Command Line Tools successfully"
      fi
    else
      warn "No Command Line Tools found in software update"
      info "Falling back to interactive installation"
      xcode-select --install || warn "Failed to install Xcode Command Line Tools"
      info "This may require user interaction - check for dialogs"
    fi
    rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
  else
    info "Xcode Command Line Tools already installed"
  fi

  # Install Rosetta 2 on Apple Silicon
  if [ "$(uname -m)" = "arm64" ]; then
    if ! pgrep -q oahd; then
      info "Installing Rosetta for Apple Silicon"
      softwareupdate --install-rosetta --agree-to-license || warn "Failed to install Rosetta"
    else
      info "Rosetta already installed"
    fi
  fi

  info "Configuring Terminal"
  defaults write com.apple.terminal StringEncodings -array 4

  info "Configuring Safari"
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

  info "Configuring Finder"
  defaults write NSGlobalDomain AppleShowAllExtensions -bool true
  defaults write com.apple.Finder AppleShowAllFiles -bool false
  chflags nohidden ~/Library
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
  defaults write com.apple.finder ShowPathbar -bool true
  defaults write com.apple.finder ShowStatusBar -bool true
  defaults write com.apple.finder NewWindowTarget -string "PfDe"

  info "Configuring Dock"
  defaults write com.apple.dock persistent-apps -array
  defaults write com.apple.dock orientation bottom
  defaults write com.apple.dock "mineffect" -string "suck"
  defaults write com.apple.dock largesize -float 94
  defaults write com.apple.dock magnification -bool true
  defaults write com.apple.dock autohide -bool true
  defaults write com.apple.dock show-recents -bool false
  defaults write com.apple.dock show-process-indicators -bool false

  info "Configuring Menu Bar"
  # Menu bar configuration may not work on newer macOS versions
  if [ -f "/System/Library/CoreServices/Menu Extras/Volume.menu" ]; then
    for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
      defaults write "${domain}" dontAutoLoad -array \
        "/System/Library/CoreServices/Menu Extras/TimeMachine.menu" \
        "/System/Library/CoreServices/Menu Extras/Volume.menu" 2>/dev/null || warn "Menu bar configuration may require manual setup"
    done
  else
    info "Menu bar configuration updated for newer macOS versions"
  fi

  info "Configuring Keyboard"
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3
  defaults write NSGlobalDomain AppleFontSmoothing -int 2
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
  defaults write NSGlobalDomain KeyRepeat -int 2
  defaults write NSGlobalDomain InitialKeyRepeat -int 15

  info "Configuring Trackpad"
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true

  info "Configuring Security and Privacy"
  defaults write com.apple.screensaver askForPassword -bool true
  defaults write com.apple.screensaver askForPasswordDelay -int 0
  sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1 || warn "Failed to enable firewall (requires sudo)"

  # Disable automatic login
  sudo defaults delete /Library/Preferences/com.apple.loginwindow autoLoginUser 2>/dev/null || true

  info "Configuring Clock"
  defaults write com.apple.menuextra.clock 'DateFormat' -string 'EEE d MMM HH:mm' 2>/dev/null || warn "Clock format may need manual configuration in System Settings"

  info "Restarting affected applications"
  for app in Safari Finder Dock SystemUIServer; do
    killall "$app" >/dev/null 2>&1 || true
  done

  success "macOS configured successfully"
}

setup_docker() {
  title "Setting up docker"

  # Check prerequisites
  if ! command -v docker >/dev/null 2>&1; then
    warn "Docker not installed. Please install Docker first using 'brew install docker'."
    info "Skipping docker setup."
    return 1
  fi

  if ! command -v colima >/dev/null 2>&1; then
    warn "Colima not installed. Please install Colima first using 'brew install colima'."
    info "Skipping docker setup."
    return 1
  fi

  # Start Colima if not running
  info "Checking Colima status"
  if ! colima status >/dev/null 2>&1; then
    info "Starting Colima with default configuration"
    if ! colima start; then
      warn "Failed to start Colima. Please check logs with 'colima logs' and try again manually."
      return 1
    fi
    success "Colima started successfully"
  else
    info "Colima is already running"
  fi

  # Configure Docker context
  info "Setting up docker context to use colima"
  if ! docker context use colima; then
    warn "Failed to set docker context to colima"
    info "You can set it manually with 'docker context use colima'"
  else
    success "Docker context set to colima"
  fi

  # Create docker socket link (with better error handling)
  info "Linking docker socket for compatibility"
  if [ -S "$HOME/.config/colima/default/docker.sock" ]; then
    # Check if we can use sudo
    if sudo -n true 2>/dev/null; then
      if sudo ln -sf "$HOME/.config/colima/default/docker.sock" /var/run/docker.sock; then
        success "Created docker socket link successfully"
      else
        warn "Failed to create docker socket link (requires sudo)"
        info "You can create it manually with 'sudo ln -sf \"$HOME/.config/colima/default/docker.sock\" /var/run/docker.sock'"
      fi
    else
      warn "Sudo access required but not available without password"
      info "You can create the docker socket link manually with 'sudo ln -sf \"$HOME/.config/colima/default/docker.sock\" /var/run/docker.sock'"
    fi
  else
    warn "Colima docker socket not found at $HOME/.config/colima/default/docker.sock"
    info "Make sure Colima is running properly"
  fi
}

case "$1" in
dotfiles)
  setup_dotfiles
  ;;
homebrew)
  setup_homebrew
  ;;
macos)
  setup_macos
  ;;
docker)
  setup_docker
  ;;
all)
  setup_dotfiles
  setup_homebrew
  setup_macos
  setup_docker
  ;;
*)
  printf "\nUsage: %s {dotfiles|homebrew|macos|docker|all}\n" "$(basename "$0")"
  exit 1
  ;;
esac

success "Done."
